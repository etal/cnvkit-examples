#!/usr/bin/env python
"""Plot the relationship (systematic bias) between counts and GC or tx length.

CNV-RNA bias plot:
- want plot of counts vs. GC for each gene
- fit a curve/trendline (e.g. rolling median)
- calculate % variance explained by the trendline: var(before)- var(after)

"""
from __future__ import absolute_import, division, print_function
import os

import numpy as np
import pandas as pd
from matplotlib import pyplot as plt

import cnvlib
from cnvlib.smoothing import rolling_median


def plot_sample(cnr, key, output_dir):
    """Create a scatter plot of `key` (e.g. GC) vs. log2 ratios.

    Point areas are proportional to weight. The rolling median (used as the bias
    correction) is shown as a trendline.
    """
    # TODO calculate log2 variance (or weighted SD) before & after
    d = (cnr.data.loc[:, (key, 'log2', 'weight')]
         .sort_values(by=key)
         .reset_index(drop=True))

    print(key, ":", d[key].median(), d[key].var())
    print("log2 :", d['log2'].median(), d['log2'].var())
    print("weight :", d['weight'].median(), d['weight'].var())

    sizes = 46 * d['weight'] ** 2 + 2
    plt.scatter(d[key], d['log2'], s=sizes,
                color="#606060", edgecolor="none", alpha=.1)

    # Show the bias being corrected
    trendline = rolling_median(d['log2'].values, .1)
    plt.plot(d[key], trendline,
             color='darkorange', linewidth=2, zorder=2)

    print("trend :", np.median(trendline), trendline.var())

    plt.ylim(-2, 2)
    if key == "gc":
        plt.xlim(.2, .8)
    else:
        assert key == "tx_length"
        plt.xlim(200, 10000)
        plt.xscale("log")
    out_fname = "{}.{}_bias.png".format(cnr.sample_id, key)
    if output_dir:
        out_fname = os.path.join(output_dir, out_fname)
    plt.savefig(out_fname, format="png", bbox_inches="tight")
    print("Wrote", out_fname)
    plt.close()



if __name__ == '__main__':
    import argparse
    AP = argparse.ArgumentParser(description=__doc__)
    AP.add_argument("nobias_cnr_fnames", nargs="*",
                    help="""Filenames of .cnr files generated by
                    'cnvkit.py import-rna --no-gc --no-txlen'.""")
    AP.add_argument("-k", "--key",
                    choices=("gc", "tx_length"), default="gc",
                    help="Bias correction name.")
    AP.add_argument("-d", "--output-dir",
                    help="Directory to write output files.")
    args = AP.parse_args()

    for fname in args.nobias_cnr_fnames:
        cnr = cnvlib.read(fname)
        plot_sample(cnr, args.key, args.output_dir)
